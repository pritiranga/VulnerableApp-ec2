buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.4.5")
    }
}

// Community Plugins
plugins {
    id("com.google.cloud.tools.jib") version "3.1.4"
    id("org.sonarqube") version "3.3"
    id("jacoco")
    id("java") // Ensure Java plugin is applied correctly
    id("eclipse")
    id("idea")
    id("org.springframework.boot") // Ensure Spring Boot plugin is applied
    id("io.spring.dependency-management")
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    mavenLocal()
}

sonarqube {
    properties {
        property "sonar.projectKey", "SasanLabs_VulnerableApp"
        property "sonar.organization", "sasanlabs"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

jib {
    from {
        image = 'openjdk:8-jre-alpine'
    }
    to {
        image = 'sasanlabs/owasp-vulnerableapp:unreleased'
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}

tasks.register('GenerateSampleVulnerability') {
    group = 'SasanLabs'
    description = 'Generates Sample Vulnerability template'
    doLast {
        println 'Copying SampleVulnerability java file to org.sasanlabs.service.vulnerability.sampleVulnerability package'
        copy {
            from(file('src/main/resources/sampleVulnerability/sampleVulnerability'))
            into(file('src/main/java/org/sasanlabs/service/vulnerability/sampleVulnerability'))
        }
        println 'Copy of java file is completed'
        println 'Copying SampleVulnerability html/css/js files to static/templates/SampleVulnerability/LEVEL_1'
        copy {
            from(file('src/main/resources/sampleVulnerability/staticResources/LEVEL_1'))
            into(file('src/main/resources/static/templates/SampleVulnerability/LEVEL_1'))
        }
        println 'Copy of html/css/js files is completed'
        println 'SampleVulnerability is generated !!!'
    }
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.5.13'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.17.2'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.3.1.RELEASE'
    runtimeOnly group: 'com.h2database', name: 'h2', version: '1.3.176'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'
    implementation group: 'org.json', name: 'json', version: '20190722'
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '8.3'
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation group: 'io.github.sasanlabs', name: 'facade-schema', version: '1.0.1'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

// Define a task to create a ZIP file of the build artifacts
task zipBuild(type: Zip) {
    group = 'Build'
    description = 'Packages build artifacts into a ZIP file'
    
    // Specify the output file name and location
    archiveFileName = 'build-artifacts.zip'
    destinationDirectory = file("$buildDir/archives")

    // Specify which files to include in the ZIP
    from(file("$buildDir/libs")) // Include JAR files or other build artifacts
    from(file("$buildDir/classes")) // Include compiled classes
    from(file("$buildDir/resources")) // Include resources if needed
}

// Ensure that the zipBuild task is run after the build task
build.finalizedBy zipBuild
